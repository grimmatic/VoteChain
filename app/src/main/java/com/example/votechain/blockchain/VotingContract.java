package com.example.votechain.blockchain;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * Web3j tarafından otomatik olarak oluşturulan VotingSystem kontratı için Java wrapper sınıfı.
 * Web3j CLI ile üretilmiştir.
 */
public class VotingContract extends Contract {
    private static final String BINARY = "6080604052348015600e575f5ffd5b50600160045f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff021916908315150217905550612927806100715f395ff3fe608060405234801561000f575f5ffd5b50600436106100fe575f3560e01c8063997d283011610095578063dbc6275611610064578063dbc62756146102da578063e6c62efc1461030a578063e8ededa614610326578063f8d1925514610359576100fe565b8063997d28301461023b5780639d71077714610259578063a1bbfc051461028e578063d46f96ed146102aa576100fe565b80634bd46448116100d15780634bd464481461019a5780635e6fef01146101cd57806370480275146102035780637ad36e841461021f576100fe565b806324d7806c146101025780632dbda7b614610132578063334c7e801461014e578063425458251461016a575b5f5ffd5b61011c600480360381019061011791906117bc565b610389565b6040516101299190611801565b60405180910390f35b61014c60048036038101906101479190611956565b6103a6565b005b610168600480360381019061016391906119fa565b61049f565b005b610184600480360381019061017f9190611a38565b6105a6565b6040516101919190611801565b60405180910390f35b6101b460048036038101906101af9190611a76565b6105d0565b6040516101c49493929190611b23565b60405180910390f35b6101e760048036038101906101e29190611b74565b6107e2565b6040516101fa9796959493929190611b9f565b60405180910390f35b61021d600480360381019061021891906117bc565b610937565b005b61023960048036038101906102349190611c1a565b610a18565b005b610243610bb9565b6040516102509190611cb6565b60405180910390f35b610273600480360381019061026e9190611b74565b610bbf565b60405161028596959493929190611ccf565b60405180910390f35b6102a860048036038101906102a39190611d3c565b610d7a565b005b6102c460048036038101906102bf9190611a38565b6110ea565b6040516102d19190611801565b60405180910390f35b6102f460048036038101906102ef9190611956565b61114c565b6040516103019190611801565b60405180910390f35b610324600480360381019061031f9190611da8565b611181565b005b610340600480360381019061033b9190611b74565b61136d565b6040516103509493929190611fea565b60405180910390f35b610373600480360381019061036e9190611956565b61171e565b6040516103809190611801565b60405180910390f35b6004602052805f5260405f205f915054906101000a900460ff1681565b60045f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff1661042f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610426906120b9565b60405180910390fd5b60016003826040516104419190612111565b90815260200160405180910390205f6101000a81548160ff0219169083151502179055507f2b36a1db58467c7ce0dcdc50a8af15ffc01a177a3275022bdbb752b43b00ecaa816040516104949190612127565b60405180910390a150565b60045f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff16610528576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161051f906120b9565b60405180910390fd5b5f8211801561053957506001548211155b610578576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161056f90612191565b60405180910390fd5b805f5f8481526020019081526020015f206005015f6101000a81548160ff0219169083151502179055505050565b6002602052815f5260405f20602052805f5260405f205f915091509054906101000a900460ff1681565b5f6060805f5f861180156105e657506001548611155b610625576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161061c90612191565b60405180910390fd5b5f8511801561064757505f5f8781526020019081526020015f20600701548511155b610686576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067d906121f9565b60405180910390fd5b5f5f5f8881526020019081526020015f206006015f8781526020019081526020015f209050805f0154816001018260020183600301548280546106c890612244565b80601f01602080910402602001604051908101604052809291908181526020018280546106f490612244565b801561073f5780601f106107165761010080835404028352916020019161073f565b820191905f5260205f20905b81548152906001019060200180831161072257829003601f168201915b5050505050925081805461075290612244565b80601f016020809104026020016040519081016040528092919081815260200182805461077e90612244565b80156107c95780601f106107a0576101008083540402835291602001916107c9565b820191905f5260205f20905b8154815290600101906020018083116107ac57829003601f168201915b5050505050915094509450945094505092959194509250565b5f602052805f5260405f205f91509050805f01549080600101805461080690612244565b80601f016020809104026020016040519081016040528092919081815260200182805461083290612244565b801561087d5780601f106108545761010080835404028352916020019161087d565b820191905f5260205f20905b81548152906001019060200180831161086057829003601f168201915b50505050509080600201805461089290612244565b80601f01602080910402602001604051908101604052809291908181526020018280546108be90612244565b80156109095780601f106108e057610100808354040283529160200191610909565b820191905f5260205f20905b8154815290600101906020018083116108ec57829003601f168201915b505050505090806003015490806004015490806005015f9054906101000a900460ff16908060070154905087565b60045f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff166109c0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109b7906120b9565b60405180910390fd5b600160045f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff02191690831515021790555050565b60045f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff16610aa1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a98906120b9565b60405180910390fd5b808210610ae3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ada906122e4565b60405180910390fd5b60015f815480929190610af59061232f565b91905055505f5f5f60015481526020019081526020015f209050600154815f018190555084816001019081610b2a9190612516565b5083816002019081610b3c9190612516565b508281600301819055508181600401819055506001816005015f6101000a81548160ff0219169083151502179055505f81600701819055506001547fe7a0aae5d733e07e246dea86213a1ac1b0aa8554bde889bb75c12752f44e53d9868585604051610baa939291906125e5565b60405180910390a25050505050565b60015481565b5f6060805f5f5f5f87118015610bd757506001548711155b610c16576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c0d90612191565b60405180910390fd5b5f5f5f8981526020019081526020015f209050805f0154816001018260020183600301548460040154856005015f9054906101000a900460ff16848054610c5c90612244565b80601f0160208091040260200160405190810160405280929190818152602001828054610c8890612244565b8015610cd35780601f10610caa57610100808354040283529160200191610cd3565b820191905f5260205f20905b815481529060010190602001808311610cb657829003601f168201915b50505050509450838054610ce690612244565b80601f0160208091040260200160405190810160405280929190818152602001828054610d1290612244565b8015610d5d5780601f10610d3457610100808354040283529160200191610d5d565b820191905f5260205f20905b815481529060010190602001808311610d4057829003601f168201915b505050505093509650965096509650965096505091939550919395565b600381604051610d8a9190612111565b90815260200160405180910390205f9054906101000a900460ff16610de4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ddb9061266b565b60405180910390fd5b5f83118015610df557506001548311155b610e34576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e2b90612191565b60405180910390fd5b5f5f5f8581526020019081526020015f209050806005015f9054906101000a900460ff16610e97576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e8e906126d3565b60405180910390fd5b8060030154421015610ede576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ed59061273b565b60405180910390fd5b8060040154421115610f25576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f1c906127a3565b60405180910390fd5b60025f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8581526020019081526020015f205f9054906101000a900460ff1615610fbe576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fb59061280b565b60405180910390fd5b5f83118015610fd1575080600701548311155b611010576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161100790612873565b60405180910390fd5b806006015f8481526020019081526020015f206003015f8154809291906110369061232f565b9190505550600160025f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8681526020019081526020015f205f6101000a81548160ff0219169083151502179055503373ffffffffffffffffffffffffffffffffffffffff1683857f7fe1d4e6b34e228b5dc059fcdc037c71b216fb2417f47c171e505144a5e4f5fc60405160405180910390a450505050565b5f60025f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8381526020019081526020015f205f9054906101000a900460ff16905092915050565b6003818051602081018201805184825260208301602085012081835280955050505050505f915054906101000a900460ff1681565b60045f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff1661120a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611201906120b9565b60405180910390fd5b5f8311801561121b57506001548311155b61125a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161125190612191565b60405180910390fd5b5f5f5f8581526020019081526020015f209050806005015f9054906101000a900460ff166112bd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112b4906126d3565b60405180910390fd5b806007015f8154809291906112d19061232f565b91905055505f816006015f836007015481526020019081526020015f2090508160070154815f01819055508381600101908161130d9190612516565b508281600201908161131f9190612516565b505f81600301819055508160070154857fed8911b3df733b7d5f75724158e54478ea12e30f49c9d31b5261879f5b76586f8660405161135e9190612127565b60405180910390a35050505050565b6060806060805f8511801561138457506001548511155b6113c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113ba90612191565b60405180910390fd5b5f5f5f8781526020019081526020015f2090505f816007015490508067ffffffffffffffff8111156113f8576113f7611832565b5b6040519080825280602002602001820160405280156114265781602001602082028036833780820191505090505b5095508067ffffffffffffffff81111561144357611442611832565b5b60405190808252806020026020018201604052801561147657816020015b60608152602001906001900390816114615790505b5094508067ffffffffffffffff81111561149357611492611832565b5b6040519080825280602002602001820160405280156114c657816020015b60608152602001906001900390816114b15790505b5093508067ffffffffffffffff8111156114e3576114e2611832565b5b6040519080825280602002602001820160405280156115115781602001602082028036833780820191505090505b5092505f600190505b818111611714575f836006015f8381526020019081526020015f209050805f0154886001846115499190612891565b8151811061155a576115596128c4565b5b60200260200101818152505080600101805461157590612244565b80601f01602080910402602001604051908101604052809291908181526020018280546115a190612244565b80156115ec5780601f106115c3576101008083540402835291602001916115ec565b820191905f5260205f20905b8154815290600101906020018083116115cf57829003601f168201915b5050505050876001846115ff9190612891565b815181106116105761160f6128c4565b5b602002602001018190525080600201805461162a90612244565b80601f016020809104026020016040519081016040528092919081815260200182805461165690612244565b80156116a15780601f10611678576101008083540402835291602001916116a1565b820191905f5260205f20905b81548152906001019060200180831161168457829003601f168201915b5050505050866001846116b49190612891565b815181106116c5576116c46128c4565b5b60200260200101819052508060030154856001846116e39190612891565b815181106116f4576116f36128c4565b5b60200260200101818152505050808061170c9061232f565b91505061151a565b5050509193509193565b5f60038260405161172f9190612111565b90815260200160405180910390205f9054906101000a900460ff169050919050565b5f604051905090565b5f5ffd5b5f5ffd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f61178b82611762565b9050919050565b61179b81611781565b81146117a5575f5ffd5b50565b5f813590506117b681611792565b92915050565b5f602082840312156117d1576117d061175a565b5b5f6117de848285016117a8565b91505092915050565b5f8115159050919050565b6117fb816117e7565b82525050565b5f6020820190506118145f8301846117f2565b92915050565b5f5ffd5b5f5ffd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b61186882611822565b810181811067ffffffffffffffff8211171561188757611886611832565b5b80604052505050565b5f611899611751565b90506118a5828261185f565b919050565b5f67ffffffffffffffff8211156118c4576118c3611832565b5b6118cd82611822565b9050602081019050919050565b828183375f83830152505050565b5f6118fa6118f5846118aa565b611890565b9050828152602081018484840111156119165761191561181e565b5b6119218482856118da565b509392505050565b5f82601f83011261193d5761193c61181a565b5b813561194d8482602086016118e8565b91505092915050565b5f6020828403121561196b5761196a61175a565b5b5f82013567ffffffffffffffff8111156119885761198761175e565b5b61199484828501611929565b91505092915050565b5f819050919050565b6119af8161199d565b81146119b9575f5ffd5b50565b5f813590506119ca816119a6565b92915050565b6119d9816117e7565b81146119e3575f5ffd5b50565b5f813590506119f4816119d0565b92915050565b5f5f60408385031215611a1057611a0f61175a565b5b5f611a1d858286016119bc565b9250506020611a2e858286016119e6565b9150509250929050565b5f5f60408385031215611a4e57611a4d61175a565b5b5f611a5b858286016117a8565b9250506020611a6c858286016119bc565b9150509250929050565b5f5f60408385031215611a8c57611a8b61175a565b5b5f611a99858286016119bc565b9250506020611aaa858286016119bc565b9150509250929050565b611abd8161199d565b82525050565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f611af582611ac3565b611aff8185611acd565b9350611b0f818560208601611add565b611b1881611822565b840191505092915050565b5f608082019050611b365f830187611ab4565b8181036020830152611b488186611aeb565b90508181036040830152611b5c8185611aeb565b9050611b6b6060830184611ab4565b95945050505050565b5f60208284031215611b8957611b8861175a565b5b5f611b96848285016119bc565b91505092915050565b5f60e082019050611bb25f83018a611ab4565b8181036020830152611bc48189611aeb565b90508181036040830152611bd88188611aeb565b9050611be76060830187611ab4565b611bf46080830186611ab4565b611c0160a08301856117f2565b611c0e60c0830184611ab4565b98975050505050505050565b5f5f5f5f60808587031215611c3257611c3161175a565b5b5f85013567ffffffffffffffff811115611c4f57611c4e61175e565b5b611c5b87828801611929565b945050602085013567ffffffffffffffff811115611c7c57611c7b61175e565b5b611c8887828801611929565b9350506040611c99878288016119bc565b9250506060611caa878288016119bc565b91505092959194509250565b5f602082019050611cc95f830184611ab4565b92915050565b5f60c082019050611ce25f830189611ab4565b8181036020830152611cf48188611aeb565b90508181036040830152611d088187611aeb565b9050611d176060830186611ab4565b611d246080830185611ab4565b611d3160a08301846117f2565b979650505050505050565b5f5f5f60608486031215611d5357611d5261175a565b5b5f611d60868287016119bc565b9350506020611d71868287016119bc565b925050604084013567ffffffffffffffff811115611d9257611d9161175e565b5b611d9e86828701611929565b9150509250925092565b5f5f5f60608486031215611dbf57611dbe61175a565b5b5f611dcc868287016119bc565b935050602084013567ffffffffffffffff811115611ded57611dec61175e565b5b611df986828701611929565b925050604084013567ffffffffffffffff811115611e1a57611e1961175e565b5b611e2686828701611929565b9150509250925092565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b611e628161199d565b82525050565b5f611e738383611e59565b60208301905092915050565b5f602082019050919050565b5f611e9582611e30565b611e9f8185611e3a565b9350611eaa83611e4a565b805f5b83811015611eda578151611ec18882611e68565b9750611ecc83611e7f565b925050600181019050611ead565b5085935050505092915050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f82825260208201905092915050565b5f611f2a82611ac3565b611f348185611f10565b9350611f44818560208601611add565b611f4d81611822565b840191505092915050565b5f611f638383611f20565b905092915050565b5f602082019050919050565b5f611f8182611ee7565b611f8b8185611ef1565b935083602082028501611f9d85611f01565b805f5b85811015611fd85784840389528151611fb98582611f58565b9450611fc483611f6b565b925060208a01995050600181019050611fa0565b50829750879550505050505092915050565b5f6080820190508181035f8301526120028187611e8b565b905081810360208301526120168186611f77565b9050818103604083015261202a8185611f77565b9050818103606083015261203e8184611e8b565b905095945050505050565b7f4f6e6c792061646d696e2063616e20706572666f726d207468697320616374695f8201527f6f6e000000000000000000000000000000000000000000000000000000000000602082015250565b5f6120a3602283611acd565b91506120ae82612049565b604082019050919050565b5f6020820190508181035f8301526120d081612097565b9050919050565b5f81905092915050565b5f6120eb82611ac3565b6120f581856120d7565b9350612105818560208601611add565b80840191505092915050565b5f61211c82846120e1565b915081905092915050565b5f6020820190508181035f83015261213f8184611aeb565b905092915050565b7f496e76616c696420656c656374696f6e204944000000000000000000000000005f82015250565b5f61217b601383611acd565b915061218682612147565b602082019050919050565b5f6020820190508181035f8301526121a88161216f565b9050919050565b7f496e76616c69642063616e6469646174652049440000000000000000000000005f82015250565b5f6121e3601483611acd565b91506121ee826121af565b602082019050919050565b5f6020820190508181035f830152612210816121d7565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f600282049050600182168061225b57607f821691505b60208210810361226e5761226d612217565b5b50919050565b7f456e642074696d65206d7573742062652061667465722073746172742074696d5f8201527f6500000000000000000000000000000000000000000000000000000000000000602082015250565b5f6122ce602183611acd565b91506122d982612274565b604082019050919050565b5f6020820190508181035f8301526122fb816122c2565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f6123398261199d565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361236b5761236a612302565b5b600182019050919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f600883026123d27fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82612397565b6123dc8683612397565b95508019841693508086168417925050509392505050565b5f819050919050565b5f61241761241261240d8461199d565b6123f4565b61199d565b9050919050565b5f819050919050565b612430836123fd565b61244461243c8261241e565b8484546123a3565b825550505050565b5f5f905090565b61245b61244c565b612466818484612427565b505050565b5b818110156124895761247e5f82612453565b60018101905061246c565b5050565b601f8211156124ce5761249f81612376565b6124a884612388565b810160208510156124b7578190505b6124cb6124c385612388565b83018261246b565b50505b505050565b5f82821c905092915050565b5f6124ee5f19846008026124d3565b1980831691505092915050565b5f61250683836124df565b9150826002028217905092915050565b61251f82611ac3565b67ffffffffffffffff81111561253857612537611832565b5b6125428254612244565b61254d82828561248d565b5f60209050601f83116001811461257e575f841561256c578287015190505b61257685826124fb565b8655506125dd565b601f19841661258c86612376565b5f5b828110156125b35784890151825560018201915060208501945060208101905061258e565b868310156125d057848901516125cc601f8916826124df565b8355505b6001600288020188555050505b505050505050565b5f6060820190508181035f8301526125fd8186611aeb565b905061260c6020830185611ab4565b6126196040830184611ab4565b949350505050565b7f496e76616c6964205443204944000000000000000000000000000000000000005f82015250565b5f612655600d83611acd565b915061266082612621565b602082019050919050565b5f6020820190508181035f83015261268281612649565b9050919050565b7f456c656374696f6e206973206e6f7420616374697665000000000000000000005f82015250565b5f6126bd601683611acd565b91506126c882612689565b602082019050919050565b5f6020820190508181035f8301526126ea816126b1565b9050919050565b7f456c656374696f6e20686173206e6f74207374617274656420796574000000005f82015250565b5f612725601c83611acd565b9150612730826126f1565b602082019050919050565b5f6020820190508181035f83015261275281612719565b9050919050565b7f456c656374696f6e2068617320656e64656400000000000000000000000000005f82015250565b5f61278d601283611acd565b915061279882612759565b602082019050919050565b5f6020820190508181035f8301526127ba81612781565b9050919050565b7f416c726561647920766f74656420696e207468697320656c656374696f6e00005f82015250565b5f6127f5601e83611acd565b9150612800826127c1565b602082019050919050565b5f6020820190508181035f830152612822816127e9565b9050919050565b7f496e76616c69642063616e6469646174650000000000000000000000000000005f82015250565b5f61285d601183611acd565b915061286882612829565b602082019050919050565b5f6020820190508181035f83015261288a81612851565b9050919050565b5f61289b8261199d565b91506128a68361199d565b92508282039050818111156128be576128bd612302565b5b92915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffdfea2646970667358221220f6a2a311bae9719f8de6ddb7c0f90603f849bb142fec995e7fb7cdad9d04153864736f6c634300081e0033";

    public static final String FUNC_ADDADMIN = "addAdmin";
    public static final String FUNC_ADDCANDIDATE = "addCandidate";
    public static final String FUNC_ADDVALIDTCID = "addValidTCId";
    public static final String FUNC_CREATEELECTION = "createElection";
    public static final String FUNC_ELECTIONCOUNT = "electionCount";
    public static final String FUNC_ELECTIONS = "elections";
    public static final String FUNC_GETCANDIDATE = "getCandidate";
    public static final String FUNC_GETELECTION = "getElection";
    public static final String FUNC_GETELECTIONRESULTS = "getElectionResults";
    public static final String FUNC_HASUSERVOTED = "hasUserVoted";
    public static final String FUNC_HASVOTED = "hasVoted";
    public static final String FUNC_ISADMIN = "isAdmin";
    public static final String FUNC_ISVALIDTCID = "isValidTCId";
    public static final String FUNC_SETELECTIONACTIVE = "setElectionActive";
    public static final String FUNC_VALIDTCIDS = "validTCIds";
    public static final String FUNC_VOTE = "vote";

    public static final Event CANDIDATEADDED_EVENT = new Event("CandidateAdded",
            Arrays.<TypeReference<?>>asList(
                    new TypeReference<Uint256>(true) {},
                    new TypeReference<Uint256>(true) {},
                    new TypeReference<Utf8String>() {}));

    public static final Event ELECTIONCREATED_EVENT = new Event("ElectionCreated",
            Arrays.<TypeReference<?>>asList(
                    new TypeReference<Uint256>(true) {},
                    new TypeReference<Utf8String>() {},
                    new TypeReference<Uint256>() {},
                    new TypeReference<Uint256>() {}));

    public static final Event TCIDADDED_EVENT = new Event("TCIDAdded",
            Arrays.<TypeReference<?>>asList(
                    new TypeReference<Utf8String>() {}));

    public static final Event VOTECAST_EVENT = new Event("VoteCast",
            Arrays.<TypeReference<?>>asList(
                    new TypeReference<Uint256>(true) {},
                    new TypeReference<Uint256>(true) {},
                    new TypeReference<Address>(true) {}));

    @Deprecated
    protected VotingContract(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected VotingContract(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected VotingContract(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected VotingContract(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public List<CandidateAddedEventResponse> getCandidateAddedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(CANDIDATEADDED_EVENT, transactionReceipt);
        ArrayList<CandidateAddedEventResponse> responses = new ArrayList<CandidateAddedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            CandidateAddedEventResponse typedResponse = new CandidateAddedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.electionId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.candidateId = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.name = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public List<ElectionCreatedEventResponse> getElectionCreatedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ELECTIONCREATED_EVENT, transactionReceipt);
        ArrayList<ElectionCreatedEventResponse> responses = new ArrayList<ElectionCreatedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ElectionCreatedEventResponse typedResponse = new ElectionCreatedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.electionId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.name = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.startTime = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.endTime = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public List<TCIDAddedEventResponse> getTCIDAddedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(TCIDADDED_EVENT, transactionReceipt);
        ArrayList<TCIDAddedEventResponse> responses = new ArrayList<TCIDAddedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TCIDAddedEventResponse typedResponse = new TCIDAddedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.hashedTCID = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public List<VoteCastEventResponse> getVoteCastEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(VOTECAST_EVENT, transactionReceipt);
        ArrayList<VoteCastEventResponse> responses = new ArrayList<VoteCastEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            VoteCastEventResponse typedResponse = new VoteCastEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.electionId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.candidateId = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.voter = (String) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public RemoteFunctionCall<TransactionReceipt> addAdmin(String _admin) {
        final Function function = new Function(
                FUNC_ADDADMIN,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _admin)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> addCandidate(BigInteger _electionId, String _name, String _party) {
        final Function function = new Function(
                FUNC_ADDCANDIDATE,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_electionId),
                        new org.web3j.abi.datatypes.Utf8String(_name),
                        new org.web3j.abi.datatypes.Utf8String(_party)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> addValidTCId(String _tcIdHash) {
        final Function function = new Function(
                FUNC_ADDVALIDTCID,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_tcIdHash)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> createElection(String _name, String _description, BigInteger _startTime, BigInteger _endTime) {
        final Function function = new Function(
                FUNC_CREATEELECTION,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_name),
                        new org.web3j.abi.datatypes.Utf8String(_description),
                        new org.web3j.abi.datatypes.generated.Uint256(_startTime),
                        new org.web3j.abi.datatypes.generated.Uint256(_endTime)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> electionCount() {
        final Function function = new Function(FUNC_ELECTIONCOUNT,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> vote(BigInteger _electionId, BigInteger _candidateId, String _tcIdHash) {
        final Function function = new Function(
                FUNC_VOTE,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_electionId),
                        new org.web3j.abi.datatypes.generated.Uint256(_candidateId),
                        new org.web3j.abi.datatypes.Utf8String(_tcIdHash)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<List<Type>> getElectionResults(BigInteger _electionId) {
        final Function function = new Function(FUNC_GETELECTIONRESULTS,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_electionId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {},
                        new TypeReference<DynamicArray<Utf8String>>() {},
                        new TypeReference<DynamicArray<Utf8String>>() {},
                        new TypeReference<DynamicArray<Uint256>>() {}));
        return executeRemoteCallMultipleValueReturn(function);
    }

    public RemoteFunctionCall<List<Type>> getCandidate(BigInteger _electionId, BigInteger _candidateId) {
        final Function function = new Function(FUNC_GETCANDIDATE,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_electionId),
                        new org.web3j.abi.datatypes.generated.Uint256(_candidateId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {},
                        new TypeReference<Utf8String>() {},
                        new TypeReference<Utf8String>() {},
                        new TypeReference<Uint256>() {}));
        return executeRemoteCallMultipleValueReturn(function);
    }

    public RemoteFunctionCall<List<Type>> getElection(BigInteger _electionId) {
        final Function function = new Function(FUNC_GETELECTION,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_electionId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {},
                        new TypeReference<Utf8String>() {},
                        new TypeReference<Utf8String>() {},
                        new TypeReference<Uint256>() {},
                        new TypeReference<Uint256>() {},
                        new TypeReference<Bool>() {}));
        return executeRemoteCallMultipleValueReturn(function);
    }

    public RemoteFunctionCall<Boolean> hasUserVoted(String _voter, BigInteger _electionId) {
        final Function function = new Function(FUNC_HASUSERVOTED,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _voter),
                        new org.web3j.abi.datatypes.generated.Uint256(_electionId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<Boolean> isValidTCId(String _tcIdHash) {
        final Function function = new Function(FUNC_ISVALIDTCID,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_tcIdHash)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> setElectionActive(BigInteger _electionId, Boolean _active) {
        final Function function = new Function(
                FUNC_SETELECTIONACTIVE,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_electionId),
                        new org.web3j.abi.datatypes.Bool(_active)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    /**
     * Yeni kontrat dağıtır.
     */
    public static RemoteCall<VotingContract> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(VotingContract.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<VotingContract> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(VotingContract.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<VotingContract> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(VotingContract.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<VotingContract> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(VotingContract.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    /**
     * Var olan bir kontrat yükler.
     */
    @Deprecated
    public static VotingContract load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new VotingContract(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static VotingContract load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new VotingContract(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static VotingContract load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new VotingContract(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static VotingContract load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new VotingContract(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    // Event response sınıfları
    public static class CandidateAddedEventResponse extends BaseEventResponse {
        public BigInteger electionId;
        public BigInteger candidateId;
        public String name;
    }

    public static class ElectionCreatedEventResponse extends BaseEventResponse {
        public BigInteger electionId;
        public String name;
        public BigInteger startTime;
        public BigInteger endTime;
    }

    public static class TCIDAddedEventResponse extends BaseEventResponse {
        public String hashedTCID;
    }

    public static class VoteCastEventResponse extends BaseEventResponse {
        public BigInteger electionId;
        public BigInteger candidateId;
        public String voter;
    }
}