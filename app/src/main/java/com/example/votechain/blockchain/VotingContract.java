package com.example.votechain.blockchain;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * Web3j tarafından otomatik olarak oluşturulan VotingSystem kontratı için Java wrapper sınıfı.
 * Eski Web3j sürümü ile uyumlu hale getirilmiştir.
 */
public class VotingContract extends Contract {
    private static final String BINARY = "";

    public static final String FUNC_ADDADMIN = "addAdmin";
    public static final String FUNC_ADDCANDIDATE = "addCandidate";
    public static final String FUNC_CREATEELECTION = "createElection";
    public static final String FUNC_SETELECTIONACTIVE = "setElectionActive";
    public static final String FUNC_VOTE = "vote";
    public static final String FUNC_ELECTIONCOUNT = "electionCount";
    public static final String FUNC_GETCANDIDATE = "getCandidate";
    public static final String FUNC_GETELECTION = "getElection";
    public static final String FUNC_GETELECTIONRESULTS = "getElectionResults";
    public static final String FUNC_GETELECTIONVOTES = "getElectionVotes";
    public static final String FUNC_GETVOTE = "getVote";
    public static final String FUNC_HASTCHASHVOTED = "hasTCHashVoted";
    public static final String FUNC_ISADMIN = "isAdmin";
    public static final String FUNC_VOTECOUNT = "voteCount";

    public static final Event CANDIDATEADDED_EVENT = new Event("CandidateAdded",
            Arrays.<TypeReference<?>>asList(
                    new TypeReference<Uint256>(true) {},
                    new TypeReference<Uint256>(true) {},
                    new TypeReference<Utf8String>() {}));

    public static final Event ELECTIONCREATED_EVENT = new Event("ElectionCreated",
            Arrays.<TypeReference<?>>asList(
                    new TypeReference<Uint256>(true) {},
                    new TypeReference<Utf8String>() {},
                    new TypeReference<Uint256>() {},
                    new TypeReference<Uint256>() {}));

    public static final Event VOTECAST_EVENT = new Event("VoteCast",
            Arrays.<TypeReference<?>>asList(
                    new TypeReference<Uint256>(true) {},
                    new TypeReference<Uint256>(true) {},
                    new TypeReference<Uint256>(true) {},
                    new TypeReference<Utf8String>() {},
                    new TypeReference<Address>() {},
                    new TypeReference<Uint256>() {}));

    @Deprecated
    protected VotingContract(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected VotingContract(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected VotingContract(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected VotingContract(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    // Event response sınıfları
    public static class CandidateAddedEventResponse extends BaseEventResponse {
        public BigInteger electionId;
        public BigInteger candidateId;
        public String name;
    }

    public static class ElectionCreatedEventResponse extends BaseEventResponse {
        public BigInteger electionId;
        public String name;
        public BigInteger startTime;
        public BigInteger endTime;
    }

    public static class VoteCastEventResponse extends BaseEventResponse {
        public BigInteger voteId;
        public BigInteger electionId;
        public BigInteger candidateId;
        public String tcHash;
        public String voter;
        public BigInteger timestamp;
    }

    // Admin fonksiyonları
    public RemoteFunctionCall<TransactionReceipt> addAdmin(String _admin) {
        final Function function = new Function(
                FUNC_ADDADMIN,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _admin)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> addCandidate(BigInteger _electionId, String _name, String _party) {
        final Function function = new Function(
                FUNC_ADDCANDIDATE,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_electionId),
                        new org.web3j.abi.datatypes.Utf8String(_name),
                        new org.web3j.abi.datatypes.Utf8String(_party)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> createElection(String _name, String _description, BigInteger _startTime, BigInteger _endTime) {
        final Function function = new Function(
                FUNC_CREATEELECTION,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_name),
                        new org.web3j.abi.datatypes.Utf8String(_description),
                        new org.web3j.abi.datatypes.generated.Uint256(_startTime),
                        new org.web3j.abi.datatypes.generated.Uint256(_endTime)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setElectionActive(BigInteger _electionId, Boolean _active) {
        final Function function = new Function(
                FUNC_SETELECTIONACTIVE,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_electionId),
                        new org.web3j.abi.datatypes.Bool(_active)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    // Oy verme fonksiyonu (zaman kontrolsüz)
    public RemoteFunctionCall<TransactionReceipt> vote(BigInteger _electionId, BigInteger _candidateId, String _tcHash) {
        final Function function = new Function(
                FUNC_VOTE,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_electionId),
                        new org.web3j.abi.datatypes.generated.Uint256(_candidateId),
                        new org.web3j.abi.datatypes.Utf8String(_tcHash)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    // View fonksiyonları
    public RemoteFunctionCall<BigInteger> electionCount() {
        final Function function = new Function(FUNC_ELECTIONCOUNT,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<List<Type>> getCandidate(BigInteger _electionId, BigInteger _candidateId) {
        final Function function = new Function(FUNC_GETCANDIDATE,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_electionId),
                        new org.web3j.abi.datatypes.generated.Uint256(_candidateId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {},
                        new TypeReference<Utf8String>() {},
                        new TypeReference<Utf8String>() {},
                        new TypeReference<Uint256>() {}));
        return executeRemoteCallMultipleValueReturn(function);
    }

    public RemoteFunctionCall<List<Type>> getElection(BigInteger _electionId) {
        final Function function = new Function(FUNC_GETELECTION,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_electionId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {},
                        new TypeReference<Utf8String>() {},
                        new TypeReference<Utf8String>() {},
                        new TypeReference<Uint256>() {},
                        new TypeReference<Uint256>() {},
                        new TypeReference<Bool>() {}));
        return executeRemoteCallMultipleValueReturn(function);
    }

    public RemoteFunctionCall<List<Type>> getElectionResults(BigInteger _electionId) {
        final Function function = new Function(FUNC_GETELECTIONRESULTS,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_electionId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {},
                        new TypeReference<DynamicArray<Utf8String>>() {},
                        new TypeReference<DynamicArray<Utf8String>>() {},
                        new TypeReference<DynamicArray<Uint256>>() {}));
        return executeRemoteCallMultipleValueReturn(function);
    }

    public RemoteFunctionCall<List<Type>> getElectionVotes(BigInteger _electionId) {
        final Function function = new Function(FUNC_GETELECTIONVOTES,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_electionId)),
                Arrays.<TypeReference<?>>asList(
                        new TypeReference<DynamicArray<Uint256>>() {},    // voteIds
                        new TypeReference<DynamicArray<Utf8String>>() {}, // tcHashes
                        new TypeReference<DynamicArray<Uint256>>() {},    // candidateIds
                        new TypeReference<DynamicArray<Uint256>>() {},    // timestamps
                        new TypeReference<DynamicArray<Address>>() {}     // voters
                ));
        return executeRemoteCallMultipleValueReturn(function);
    }

    public RemoteFunctionCall<List<Type>> getVote(BigInteger _voteId) {
        final Function function = new Function(FUNC_GETVOTE,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_voteId)),
                Arrays.<TypeReference<?>>asList(
                        new TypeReference<Utf8String>() {},  // tcHash
                        new TypeReference<Uint256>() {},     // electionId
                        new TypeReference<Uint256>() {},     // candidateId
                        new TypeReference<Uint256>() {},     // timestamp
                        new TypeReference<Address>() {}      // voter
                ));
        return executeRemoteCallMultipleValueReturn(function);
    }

    public RemoteFunctionCall<Boolean> hasTCHashVoted(String _tcHash, BigInteger _electionId) {
        final Function function = new Function(FUNC_HASTCHASHVOTED,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_tcHash),
                        new org.web3j.abi.datatypes.generated.Uint256(_electionId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<Boolean> isAdmin(String param0) {
        final Function function = new Function(FUNC_ISADMIN,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<BigInteger> voteCount() {
        final Function function = new Function(FUNC_VOTECOUNT,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    // Contract loading methods
    @Deprecated
    public static VotingContract load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new VotingContract(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static VotingContract load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new VotingContract(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static VotingContract load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new VotingContract(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static VotingContract load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new VotingContract(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    // Deploy methods
    public static RemoteCall<VotingContract> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(VotingContract.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    public static RemoteCall<VotingContract> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(VotingContract.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<VotingContract> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(VotingContract.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<VotingContract> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(VotingContract.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    // Event helper methods (eski Web3j uyumlu)
    public List<CandidateAddedEventResponse> getCandidateAddedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(CANDIDATEADDED_EVENT, transactionReceipt);
        ArrayList<CandidateAddedEventResponse> responses = new ArrayList<CandidateAddedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            CandidateAddedEventResponse typedResponse = new CandidateAddedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.electionId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.candidateId = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.name = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public List<ElectionCreatedEventResponse> getElectionCreatedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ELECTIONCREATED_EVENT, transactionReceipt);
        ArrayList<ElectionCreatedEventResponse> responses = new ArrayList<ElectionCreatedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ElectionCreatedEventResponse typedResponse = new ElectionCreatedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.electionId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.name = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.startTime = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.endTime = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public List<VoteCastEventResponse> getVoteCastEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(VOTECAST_EVENT, transactionReceipt);
        ArrayList<VoteCastEventResponse> responses = new ArrayList<VoteCastEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            VoteCastEventResponse typedResponse = new VoteCastEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.voteId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.electionId = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.candidateId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.tcHash = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.voter = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.timestamp = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }
}