package com.example.votechain.ui;

import android.os.Bundle;
import android.util.Log;
import android.widget.*;
import androidx.appcompat.app.AppCompatActivity;
import com.example.votechain.R;
import com.example.votechain.blockchain.BlockchainElectionManager;
import com.example.votechain.model.Candidate;
import com.example.votechain.model.Election;
import com.google.firebase.firestore.FirebaseFirestore;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.TimeZone;


public class AdminActivity extends AppCompatActivity {

    private static final String TAG = "AdminActivity";

    // UI Elemanlarƒ±
    private EditText etElectionName, etElectionDescription;
    private DatePicker dpStartDate, dpEndDate;
    private TimePicker tpStartTime, tpEndTime;
    private EditText etCandidateName, etCandidateParty;
    private ListView lvCandidates;
    private Button btnCreateElection, btnAddCandidate, btnRegisterTCIds, btnActivateElection;
    private TextView tvStatus;

    // Data
    private BlockchainElectionManager electionManager;
    private ArrayAdapter<String> candidatesAdapter;
    private List<Candidate> candidatesList;
    private String currentElectionId;
    private boolean systemReady = false;
    private FirebaseFirestore db;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_admin);

        initViews();
        setupListeners();

        electionManager = BlockchainElectionManager.getInstance();
        candidatesList = new ArrayList<>();
        db = FirebaseFirestore.getInstance();

        // Blockchain sistemini ba≈ülat
        initializeBlockchainSystem();
    }

    private void initViews() {
        etElectionName = findViewById(R.id.etElectionName);
        etElectionDescription = findViewById(R.id.etElectionDescription);
        dpStartDate = findViewById(R.id.dpStartDate);
        dpEndDate = findViewById(R.id.dpEndDate);
        tpStartTime = findViewById(R.id.tpStartTime);
        tpEndTime = findViewById(R.id.tpEndTime);
        etCandidateName = findViewById(R.id.etCandidateName);
        etCandidateParty = findViewById(R.id.etCandidateParty);
        lvCandidates = findViewById(R.id.lvCandidates);
        btnCreateElection = findViewById(R.id.btnCreateElection);
        btnAddCandidate = findViewById(R.id.btnAddCandidate);
        btnActivateElection = findViewById(R.id.btnStartElection);
        tvStatus = findViewById(R.id.tvStatus);

        // ListView adapter
        candidatesAdapter = new ArrayAdapter<>(this, android.R.layout.simple_list_item_1);
        lvCandidates.setAdapter(candidatesAdapter);

        // Ba≈ülangƒ±√ßta t√ºm butonlarƒ± deaktif et
        setButtonsEnabled(false);
    }

    private void setupListeners() {
        btnCreateElection.setOnClickListener(v -> createElection());
        btnAddCandidate.setOnClickListener(v -> addCandidate());
        btnActivateElection.setOnClickListener(v -> activateElection());
    }

    /**
     * Blockchain sistemini ba≈ülatƒ±r
     */
    private void initializeBlockchainSystem() {
        updateStatus("üîß Blockchain sistemi ba≈ülatƒ±lƒ±yor...\n" +
                "Ethereum aƒüƒ±na baƒülanƒ±yor...");

        electionManager.initializeSystem(this)
                .thenAccept(success -> {
                    runOnUiThread(() -> {
                        if (success) {
                            systemReady = true;
                            showSystemInfo();
                            btnCreateElection.setEnabled(true);
                        } else {
                            updateStatus("‚ùå Blockchain sistemi ba≈ülatƒ±lamadƒ±!\n" +
                                    "L√ºtfen internet baƒülantƒ±nƒ±zƒ± kontrol edin.");
                        }
                    });
                })
                .exceptionally(e -> {
                    runOnUiThread(() -> {
                        updateStatus("‚ùå Sistem ba≈ülatma hatasƒ±:\n" + e.getMessage());
                        Log.e(TAG, "System initialization error", e);
                    });
                    return null;
                });
    }

    /**
     * Sistem bilgilerini g√∂sterir
     */
    private void showSystemInfo() {
        Map<String, String> systemInfo = electionManager.getSystemInfo();

        updateStatus("‚úÖ VoteChain Sistemi Hazƒ±r!\n\n" +
                "üèõÔ∏è Admin Paneli Aktif\n" +
                "üîê C√ºzdan: " + truncateAddress(systemInfo.get("walletAddress")) + "\n" +
                "üìú Kontrat: " + truncateAddress(systemInfo.get("contractAddress")) + "\n\n" +
                "Artƒ±k se√ßim olu≈üturabilirsiniz!");
    }

    /**
     * Yeni se√ßim olu≈üturur
     */
    private void createElection() {
        String name = etElectionName.getText().toString().trim();
        String description = etElectionDescription.getText().toString().trim();

        if (name.isEmpty()) {
            Toast.makeText(this, "Se√ßim adƒ± gerekli!", Toast.LENGTH_SHORT).show();
            return;
        }

        if (description.isEmpty()) {
            description = name + " se√ßimi";
        }


        Calendar startCalendar = Calendar.getInstance();
        startCalendar.set(dpStartDate.getYear(), dpStartDate.getMonth(),
                dpStartDate.getDayOfMonth(), tpStartTime.getCurrentHour(),
                tpStartTime.getCurrentMinute(), 0);
        startCalendar.set(Calendar.SECOND, 0);
        startCalendar.set(Calendar.MILLISECOND, 0);

        Calendar endCalendar = Calendar.getInstance();
        endCalendar.set(dpEndDate.getYear(), dpEndDate.getMonth(),
                dpEndDate.getDayOfMonth(), tpEndTime.getCurrentHour(),
                tpEndTime.getCurrentMinute(), 0);
        endCalendar.set(Calendar.SECOND, 0);
        endCalendar.set(Calendar.MILLISECOND, 0);

        if (!startCalendar.before(endCalendar)) {
            Toast.makeText(this, "Biti≈ü zamanƒ± ba≈ülangƒ±√ßtan sonra olmalƒ±!", Toast.LENGTH_SHORT).show();
            return;
        }


        String finalDescription = description;
        electionManager.getCurrentBlockchainTime()
                .thenAccept(blockchainCurrentTime -> {
                    runOnUiThread(() -> {
                        // Timezone d√∂n√º≈üt√ºrme i≈ülemi
                        long startTimeUnix = convertToBlockchainTime(startCalendar);
                        long endTimeUnix = convertToBlockchainTime(endCalendar);

                        Log.d(TAG, "üïê ZAMAN KONTROL√ú (D√ºzeltilmi≈ü):");
                        Log.d(TAG, "‚õìÔ∏è Blockchain ≈ûimdiki Zaman: " + blockchainCurrentTime);
                        Log.d(TAG, "üìÖ Hesaplanan Start Unix: " + startTimeUnix);
                        Log.d(TAG, "üìÖ Hesaplanan End Unix: " + endTimeUnix);
                        Log.d(TAG, "üìÖ Start T√ºrkiye: " + formatDateTime(startCalendar));
                        Log.d(TAG, "üìÖ End T√ºrkiye: " + formatDateTime(endCalendar));


                        if (endTimeUnix <= blockchainCurrentTime) {

                            long newEndTime = blockchainCurrentTime + (24 * 3600);
                            Log.w(TAG, "‚ö†Ô∏è Biti≈ü zamanƒ± ge√ßmi≈üte kaldƒ±, otomatik d√ºzeltiliyor:");
                            Log.w(TAG, "üîß Yeni biti≈ü zamanƒ±: " + newEndTime + " (" + new Date(newEndTime * 1000) + ")");
                            endTimeUnix = newEndTime;
                        }

                        if (startTimeUnix <= blockchainCurrentTime) {
                            // Ba≈ülangƒ±√ß zamanƒ±nƒ± da d√ºzelt
                            startTimeUnix = blockchainCurrentTime + 300; // 5 dakika sonra ba≈ülasƒ±n
                            Log.w(TAG, "üîß Ba≈ülangƒ±√ß zamanƒ± da d√ºzeltildi: " + startTimeUnix);
                        }

                        long currentTimeUnix = System.currentTimeMillis() / 1000;

                        Log.d(TAG, "üìä SON ZAMAN DURUMU:");
                        Log.d(TAG, "‚è∞ Start farkƒ± (blockchain): " + (startTimeUnix - blockchainCurrentTime) + " saniye");
                        Log.d(TAG, "‚è∞ End farkƒ± (blockchain): " + (endTimeUnix - blockchainCurrentTime) + " saniye");

                        // Se√ßim s√ºresinin minimum 1 saat olmasƒ±nƒ± saƒüla
                        if ((endTimeUnix - startTimeUnix) < 3600) {
                            endTimeUnix = startTimeUnix + 3600; // 1 saat
                            Log.w(TAG, "üîß Minimum se√ßim s√ºresi i√ßin biti≈ü zamanƒ± ayarlandƒ±");
                        }

                        updateStatus("üó≥Ô∏è Se√ßim olu≈üturuluyor...\n" +
                                "üìã Ad: " + name + "\n" +
                                "‚è∞ Ba≈ülangƒ±√ß (Blockchain UTC): " + new Date(startTimeUnix * 1000) + "\n" +
                                "üèÅ Biti≈ü (Blockchain UTC): " + new Date(endTimeUnix * 1000) + "\n" +
                                "üî¢ Start Unix: " + startTimeUnix + "\n" +
                                "üî¢ End Unix: " + endTimeUnix + "\n" +
                                "‚õìÔ∏è Blockchain zamanƒ±na g√∂re d√ºzeltildi\n\n" +
                                "Blockchain i≈ülemi ba≈ülƒ±yor...");

                        Election election = new Election(name, finalDescription,
                                startCalendar.getTime(),
                                endCalendar.getTime(),
                                false);

                        // Final deƒüi≈ükenler olu≈ütur
                        final long finalStartTimeUnix = startTimeUnix;
                        final long finalEndTimeUnix = endTimeUnix;

                        electionManager.createElectionWithCustomTimes(election, finalStartTimeUnix, finalEndTimeUnix)
                                .thenAccept(electionId -> {
                                    runOnUiThread(() -> {
                                        currentElectionId = electionId;

                                        updateStatus("‚úÖ Se√ßim ba≈üarƒ±yla olu≈üturuldu!\n\n" +
                                                "üìã Se√ßim: " + name + "\n" +
                                                "üÜî ID: " + electionId + "\n" +
                                                "üîó Blockchain: Entegre edildi\n" +
                                                "‚è∞ Zamanlar blockchain'e uygun d√ºzeltildi\n" +
                                                "üåç UTC zamanlarƒ± kullanƒ±ldƒ±\n\n" +
                                                "≈ûimdi adaylarƒ± ekleyebilirsiniz!");

                                        btnCreateElection.setEnabled(false);
                                        btnAddCandidate.setEnabled(true);
                                        etElectionName.setText("");
                                        etElectionDescription.setText("");

                                        // Olu≈üturulduktan sonra blockchain zamanƒ±nƒ± tekrar doƒürula
                                        verifyBlockchainTime(finalStartTimeUnix, finalEndTimeUnix);
                                    });
                                })
                                .exceptionally(e -> {
                                    runOnUiThread(() -> {
                                        updateStatus("‚ùå Se√ßim olu≈üturma hatasƒ±:\n" + e.getMessage());
                                        Log.e(TAG, "Election creation error", e);
                                    });
                                    return null;
                                });
                    });
                })
                .exceptionally(e -> {
                    runOnUiThread(() -> {
                        Toast.makeText(this, "Blockchain zamanƒ± alƒ±namadƒ±: " + e.getMessage(), Toast.LENGTH_LONG).show();
                    });
                    return null;
                });
    }
    /**
     * Calendar'ƒ± blockchain i√ßin doƒüru Unix timestamp'e √ßevirir
     * T√ºrkiye saatinden UTC'ye d√∂n√º≈üt√ºr√ºr
     */

    private long convertToBlockchainTime(Calendar calendar) {

        long localTimeUnix = calendar.getTimeInMillis() / 1000;


        TimeZone turkeyTimeZone = TimeZone.getTimeZone("Europe/Istanbul");
        int offsetInMilliseconds = turkeyTimeZone.getOffset(calendar.getTimeInMillis());
        long utcTimeUnix = localTimeUnix - (offsetInMilliseconds / 1000);

        Log.d(TAG, "üîÑ Timezone D√∂n√º≈ü√ºm√º (D√ºzeltilmi≈ü):");
        Log.d(TAG, "üìÖ Local Time: " + formatDateTime(calendar));
        Log.d(TAG, "üìÖ Local Unix: " + localTimeUnix);
        Log.d(TAG, "üåê Offset (saniye): " + (offsetInMilliseconds / 1000));
        Log.d(TAG, "üåê UTC Unix: " + utcTimeUnix);

        long currentTimeUnix = System.currentTimeMillis() / 1000;
        Log.d(TAG, "‚è∞ Current Unix: " + currentTimeUnix);
        Log.d(TAG, "‚è∞ Fark: " + (utcTimeUnix - currentTimeUnix) + " saniye");


        if (utcTimeUnix <= currentTimeUnix) {

            utcTimeUnix = currentTimeUnix + 3600; // 1 saat sonra
            Log.d(TAG, "üîß Zaman gelecekte tutuldu: " + utcTimeUnix);
            Log.d(TAG, "üìÖ Yeni UTC Zaman: " + new Date(utcTimeUnix * 1000));
        }

        return utcTimeUnix;
    }
    private void verifyBlockchainTime(long expectedStartTime, long expectedEndTime) {
        if (electionManager == null) {
            Log.e(TAG, "‚ùå ElectionManager null!");
            return;
        }

        electionManager.getCurrentBlockchainTime()
                .thenAccept(blockchainTime -> {
                    runOnUiThread(() -> {
                        Log.d(TAG, "üïê BLOCKCHAIN ZAMAN DOƒûRULAMA:");
                        Log.d(TAG, "‚õìÔ∏è Blockchain ≈ûimdiki Zaman: " + blockchainTime);
                        Log.d(TAG, "üìÖ Blockchain Tarihi: " + new Date(blockchainTime * 1000));
                        Log.d(TAG, "‚è∞ Se√ßim Ba≈ülangƒ±√ß: " + expectedStartTime + " (" + new Date(expectedStartTime * 1000) + ")");
                        Log.d(TAG, "üèÅ Se√ßim Biti≈ü: " + expectedEndTime + " (" + new Date(expectedEndTime * 1000) + ")");
                        Log.d(TAG, "‚úÖ ≈ûu Anda Oy Verilebilir Mi: " +
                                (blockchainTime >= expectedStartTime && blockchainTime <= expectedEndTime));

                        if (blockchainTime > expectedEndTime) {
                            Log.e(TAG, "‚ùå UYARI: Blockchain zamanƒ± se√ßim biti≈ü zamanƒ±nƒ± ge√ßmi≈ü!");
                            long hoursDiff = (blockchainTime - expectedEndTime) / 3600;
                            Log.e(TAG, "üîß Se√ßim biti≈ü zamanƒ±nƒ± " + hoursDiff + " saat ileriye alƒ±n");

                            // Kullanƒ±cƒ±ya uyarƒ± g√∂ster
                            Toast.makeText(AdminActivity.this,
                                    "‚ö†Ô∏è Uyarƒ±: Se√ßim s√ºresi blockchain zamanƒ±na g√∂re dolmu≈ü!\n" +
                                            "Se√ßimi " + hoursDiff + " saat uzatmanƒ±z gerekebilir.",
                                    Toast.LENGTH_LONG).show();
                        }
                    });
                })
                .exceptionally(e -> {
                    runOnUiThread(() -> {
                        Log.w(TAG, "‚ö†Ô∏è Blockchain zamanƒ± kontrol edilemedi: " + e.getMessage());
                        Toast.makeText(AdminActivity.this,
                                "Blockchain zamanƒ± kontrol edilemedi", Toast.LENGTH_SHORT).show();
                    });
                    return null;
                });
    }

    /**
     * Tarihi kullanƒ±cƒ± dostu formatta g√∂sterir
     */
    private String formatDateTime(Calendar calendar) {
        SimpleDateFormat formatter = new SimpleDateFormat("dd.MM.yyyy HH:mm", Locale.getDefault());
        return formatter.format(calendar.getTime());
    }

    /**
     * Se√ßime aday ekler
     */
    private void addCandidate() {
        String name = etCandidateName.getText().toString().trim();
        String party = etCandidateParty.getText().toString().trim();

        if (name.isEmpty()) {
            Toast.makeText(this, "Aday adƒ± gerekli!", Toast.LENGTH_SHORT).show();
            return;
        }

        if (party.isEmpty()) {
            party = "Baƒüƒ±msƒ±z";
        }

        // Final deƒüi≈ükenler olu≈ütur
        final String finalName = name;
        final String finalParty = party;

        updateStatus("üë§ Aday ekleniyor...\n" +
                "üìù Ad: " + finalName + "\n" +
                "üèõÔ∏è Parti: " + finalParty + "\n\n" +
                "Blockchain kaydƒ± yapƒ±lƒ±yor...");

        Candidate candidate = new Candidate(currentElectionId, finalName, finalParty);

        electionManager.addCandidate(currentElectionId, candidate)
                .thenAccept(candidateId -> {
                    runOnUiThread(() -> {
                        // Listeye ekle
                        candidatesList.add(candidate);
                        candidatesAdapter.add(finalName + " - " + finalParty);
                        candidatesAdapter.notifyDataSetChanged();

                        updateStatus("‚úÖ Aday ba≈üarƒ±yla eklendi!\n\n" +
                                "üë§ " + finalName + " (" + finalParty + ")\n" +
                                "üÜî ID: " + candidateId + "\n" +
                                "üìä Toplam Aday: " + candidatesList.size() + "\n\n" +
                                (candidatesList.size() >= 2 ?
                                        "‚ú® Se√ßimi aktifle≈ütirmeye hazƒ±r!" :
                                        "En az 2 aday gerekli"));

                        // Form temizle
                        etCandidateName.setText("");
                        etCandidateParty.setText("");

                        // 2 aday olunca aktifle≈ütirme butonunu a√ß
                        if (candidatesList.size() >= 2) {
                            btnActivateElection.setEnabled(true);
                        }
                    });
                })
                .exceptionally(e -> {
                    runOnUiThread(() -> {
                        updateStatus("‚ùå Aday ekleme hatasƒ±:\n" + e.getMessage());
                        Log.e(TAG, "Candidate addition error", e);
                    });
                    return null;
                });
    }

    /**
     * Se√ßimi aktifle≈ütirir
     */
    private void activateElection() {
        updateStatus("üöÄ Se√ßim aktifle≈ütiriliyor...\n" +
                "üìä " + candidatesList.size() + " aday ile se√ßim ba≈ülatƒ±lƒ±yor\n\n" +
                "Son i≈ülemler yapƒ±lƒ±yor...");


        activateElectionInFirebase();
    }

    /**
     * TC ID'lerini sƒ±rayla ekler
     */


    /**
     * Se√ßimi Firebase'de aktif hale getirir
     */
    private void activateElectionInFirebase() {
        if (currentElectionId == null) {
            updateStatus("‚ùå Se√ßim ID'si bulunamadƒ±!");
            return;
        }

        // Firebase'de se√ßimi aktif hale getir
        db.collection("elections").document(currentElectionId)
                .update("active", true)
                .addOnSuccessListener(aVoid -> {
                    runOnUiThread(() -> {
                        updateStatus("üéâ SE√áƒ∞M AKTƒ∞F!\n\n" +
                                "‚úÖ Vatanda≈ülar artƒ±k oy verebilir\n" +
                                "üìä Aday Sayƒ±sƒ±: " + candidatesList.size() + "\n" +
                                "üîê Blockchain G√ºvenliƒüi: Aktif\n" +
                                "üó≥Ô∏è ≈ûeffaf Oylama: Hazƒ±r\n\n" +
                                "Se√ßim kullanƒ±cƒ±lara g√∂r√ºn√ºr hale geldi!");

                        // T√ºm butonlarƒ± deaktif et
                        setButtonsEnabled(false);
                        btnActivateElection.setEnabled(false);

                        Toast.makeText(AdminActivity.this,
                                "Se√ßim ba≈üarƒ±yla aktifle≈ütirildi! Kullanƒ±cƒ±lar artƒ±k se√ßimi g√∂rebilir ve oy verebilir.",
                                Toast.LENGTH_LONG).show();
                    });
                })
                .addOnFailureListener(e -> {
                    runOnUiThread(() -> {
                        updateStatus("‚ùå Se√ßim aktifle≈ütirme hatasƒ±:\n" + e.getMessage());
                        Log.e(TAG, "Firebase activation error", e);
                    });
                });
    }

    /**
     * Butonlarƒ±n aktif/pasif durumunu ayarlar
     */
    private void setButtonsEnabled(boolean enabled) {
        btnCreateElection.setEnabled(enabled && systemReady);
        btnAddCandidate.setEnabled(enabled && currentElectionId != null);
    }

    /**
     * Durum metnini g√ºnceller
     */
    private void updateStatus(String status) {
        tvStatus.setText(status);
        Log.d(TAG, status);
    }

    /**
     * Ethereum adresini kƒ±saltƒ±r
     */
    private String truncateAddress(String address) {
        if (address != null && address.length() > 10) {
            return address.substring(0, 6) + "..." + address.substring(address.length() - 4);
        }
        return address;
    }

    /**
     * Tarih ve saati formatlar
     */

}